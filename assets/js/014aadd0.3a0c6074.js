"use strict";(self.webpackChunkrunar_docs=self.webpackChunkrunar_docs||[]).push([[6008],{7895:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"features/logging","title":"Logging","description":"Runar provides a comprehensive logging system built on top of the tracing crate, offering structured logging with context-aware components and flexible configuration.","source":"@site/docs/features/logging.md","sourceDirName":"features","slug":"/features/logging","permalink":"/rust-docs/docs/features/logging","draft":false,"unlisted":false,"editUrl":"https://github.com/runar-labs/runar-rust/tree/main/rust-docs/markdown/docs/features/logging.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Runar Key Management System","permalink":"/rust-docs/docs/features/keys-management"},"next":{"title":"ValueMap (VMap)","permalink":"/rust-docs/docs/features/vmap"}}');var r=t(4848),s=t(8453);const o={},a="Logging",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Core Components",id:"core-components",level:2},{value:"Logger",id:"logger",level:3},{value:"LoggingContext",id:"loggingcontext",level:3},{value:"Usage in Services",id:"usage-in-services",level:2},{value:"Lifecycle Methods",id:"lifecycle-methods",level:3},{value:"Request Handlers",id:"request-handlers",level:3},{value:"Internal Service Methods",id:"internal-service-methods",level:3},{value:"Event Handlers",id:"event-handlers",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Basic Setup",id:"basic-setup",level:3},{value:"Custom Configuration",id:"custom-configuration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Context for Service Logging",id:"1-use-context-for-service-logging",level:3},{value:"2. Include Relevant Context",id:"2-include-relevant-context",level:3},{value:"3. Use Appropriate Log Levels",id:"3-use-appropriate-log-levels",level:3},{value:"4. Avoid Sensitive Data",id:"4-avoid-sensitive-data",level:3},{value:"5. Structured Logging",id:"5-structured-logging",level:3},{value:"Integration with Tracing",id:"integration-with-tracing",level:2},{value:"Testing",id:"testing",level:2}];function g(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"logging",children:"Logging"})}),"\n",(0,r.jsxs)(n.p,{children:["Runar provides a comprehensive logging system built on top of the ",(0,r.jsx)(n.code,{children:"tracing"})," crate, offering structured logging with context-aware components and flexible configuration."]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["The logging system is designed around the ",(0,r.jsx)(n.code,{children:"Logger"})," struct and ",(0,r.jsx)(n.code,{children:"LoggingContext"})," trait, providing:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Structured logging"})," with automatic context propagation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Component-based logging"})," for different parts of the system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configurable log levels"})," and output formats"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Context-aware logging"})," in services and handlers"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsx)(n.h3,{id:"logger",children:"Logger"}),"\n",(0,r.jsx)(n.p,{children:"The main logging interface that provides methods for different log levels:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use runar_common::logging::Logger;\n\nlet logger = Logger::new("my-component");\n\nlogger.info("Application started");\nlogger.debug("Processing request");\nlogger.warn("Resource usage high");\nlogger.error("Failed to connect to database");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"loggingcontext",children:"LoggingContext"}),"\n",(0,r.jsx)(n.p,{children:"A trait that provides logging capabilities to contexts used throughout the system:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use runar_common::logging::LoggingContext;\n\n// RequestContext and LifecycleContext implement LoggingContext\ncontext.info("Processing request");\ncontext.debug("Request parameters: {:?}", params);\ncontext.warn("Deprecated API used");\ncontext.error("Validation failed: {}", error);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"usage-in-services",children:"Usage in Services"}),"\n",(0,r.jsx)(n.p,{children:"Services use the logging context provided by the framework, not by creating their own logger instances."}),"\n",(0,r.jsx)(n.h3,{id:"lifecycle-methods",children:"Lifecycle Methods"}),"\n",(0,r.jsxs)(n.p,{children:["In service lifecycle methods (",(0,r.jsx)(n.code,{children:"init"}),", ",(0,r.jsx)(n.code,{children:"start"}),", ",(0,r.jsx)(n.code,{children:"stop"}),"), use the ",(0,r.jsx)(n.code,{children:"LifecycleContext"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use runar_node::services::{AbstractService, LifecycleContext};\nuse anyhow::Result;\n\nimpl AbstractService for MyService {\n    async fn init(&self, context: LifecycleContext) -> Result<()> {\n        context.info("Initializing MyService");\n        context.debug(format!("Service path: {}", self.path()));\n        \n        // Register actions and subscriptions...\n        \n        context.info("MyService initialized successfully");\n        Ok(())\n    }\n\n    async fn start(&self, context: LifecycleContext) -> Result<()> {\n        context.info("Starting MyService");\n        // Start service operations...\n        context.info("MyService started successfully");\n        Ok(())\n    }\n\n    async fn stop(&self, context: LifecycleContext) -> Result<()> {\n        context.info("Stopping MyService");\n        // Cleanup operations...\n        context.info("MyService stopped");\n        Ok(())\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"request-handlers",children:"Request Handlers"}),"\n",(0,r.jsxs)(n.p,{children:["In request handlers, use the ",(0,r.jsx)(n.code,{children:"RequestContext"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'async fn handle_operation(\n    &self,\n    params: Option<ArcValue>,\n    context: RequestContext,\n) -> Result<ArcValue> {\n    context.info("Handling operation request");\n    \n    // Extract and validate parameters\n    let data = params.unwrap_or_else(ArcValue::null);\n    context.debug(format!("Request parameters: {:?}", data));\n    \n    // Process the request\n    match self.process_operation(data, &context).await {\n        Ok(result) => {\n            context.info("Operation completed successfully");\n            Ok(ArcValue::new_primitive(result))\n        }\n        Err(e) => {\n            context.error(format!("Operation failed: {}", e));\n            Err(anyhow!("Operation failed: {}", e))\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"internal-service-methods",children:"Internal Service Methods"}),"\n",(0,r.jsx)(n.p,{children:"For internal service methods that receive a context parameter:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'async fn process_operation(\n    &self,\n    data: ArcValue,\n    ctx: &RequestContext,\n) -> Result<f64> {\n    ctx.debug("Processing operation");\n    \n    // Validate input\n    if data.is_null() {\n        ctx.error("Invalid input: null data");\n        return Err(anyhow!("Invalid input"));\n    }\n    \n    // Process the operation\n    let result = self.calculate(data)?;\n    ctx.debug(format!("Operation result: {}", result));\n    \n    Ok(result)\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"event-handlers",children:"Event Handlers"}),"\n",(0,r.jsx)(n.p,{children:"In event subscription handlers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'context\n    .subscribe(\n        "my/event",\n        Box::new(move |event_ctx, payload| {\n            Box::pin(async move {\n                event_ctx.info("Received my/event");\n                event_ctx.debug(format!("Event payload: {:?}", payload));\n                \n                // Process the event...\n                \n                event_ctx.info("Event processed successfully");\n                Ok(())\n            })\n        }),\n    )\n    .await?;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,r.jsx)(n.p,{children:"Initialize logging with default configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use runar_common::logging::init_logging;\n\nfn main() {\n    init_logging().expect("Failed to initialize logging");\n    // ... rest of application\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"custom-configuration",children:"Custom Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Configure logging with specific settings:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use runar_common::logging::{init_logging_with_config, LoggingConfig};\n\nfn main() {\n    let config = LoggingConfig {\n        level: "debug".to_string(),\n        format: "json".to_string(),\n        output: "stdout".to_string(),\n    };\n    \n    init_logging_with_config(config).expect("Failed to initialize logging");\n    // ... rest of application\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-use-context-for-service-logging",children:"1. Use Context for Service Logging"}),"\n",(0,r.jsx)(n.p,{children:"Always use the provided context for logging in services:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// \u2705 Correct - use context\ncontext.info("Processing request");\ncontext.error(format!("Failed to process: {}", error));\n\n// \u274c Incorrect - don\'t create your own logger in services\nlet logger = Logger::new("service");\nlogger.info("Processing request");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-include-relevant-context",children:"2. Include Relevant Context"}),"\n",(0,r.jsx)(n.p,{children:"Add useful information to log messages:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'context.info(format!("User {} logged in from {}", user_id, ip_address));\ncontext.debug(format!("Request parameters: {:?}", params));\ncontext.error(format!("Database query failed: {} (query: {})", error, sql));\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-use-appropriate-log-levels",children:"3. Use Appropriate Log Levels"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error"}),": For errors that need immediate attention"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Warn"}),": For potentially harmful situations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Info"}),": For general application flow"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Debug"}),": For detailed diagnostic information"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-avoid-sensitive-data",children:"4. Avoid Sensitive Data"}),"\n",(0,r.jsx)(n.p,{children:"Never log sensitive information like passwords, tokens, or personal data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// \u2705 Correct\ncontext.info("User authentication successful");\n\n// \u274c Incorrect\ncontext.info(format!("User {} logged in with password {}", user, password));\n'})}),"\n",(0,r.jsx)(n.h3,{id:"5-structured-logging",children:"5. Structured Logging"}),"\n",(0,r.jsx)(n.p,{children:"Use structured data when available:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'context.info(format!("Processing order {} for customer {}", order_id, customer_id));\ncontext.debug(format!("Order details: {:?}", order));\n'})}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-tracing",children:"Integration with Tracing"}),"\n",(0,r.jsxs)(n.p,{children:["The logging system is built on top of ",(0,r.jsx)(n.code,{children:"tracing"}),", so you can use tracing macros and spans:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use tracing::{info, debug, error, instrument};\n\n#[instrument(skip(context))]\nasync fn handle_request(\n    &self,\n    params: Option<ArcValue>,\n    context: RequestContext,\n) -> Result<ArcValue> {\n    info!("Handling request");\n    debug!("Request parameters: {:?}", params);\n    \n    // ... implementation\n    \n    info!("Request completed successfully");\n    Ok(result)\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(n.p,{children:"When testing services, you can create mock contexts or use the actual logging system:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[tokio::test]\nasync fn test_service_operation() {\n    // Initialize logging for tests\n    init_logging().expect("Failed to initialize logging");\n    \n    let service = MyService::new("test-service", "/test");\n    // ... test implementation\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This logging system provides a consistent, context-aware approach to logging throughout the Runar framework, ensuring that all log messages include relevant context and follow best practices for production applications."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}}}]);