"use strict";(self.webpackChunkrunar_docs=self.webpackChunkrunar_docs||[]).push([[1507],{4476:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"core/system-diagrams","title":"Runar Node System Diagrams","description":"This document provides a comprehensive collection of system diagrams illustrating the various flows and interactions within the Runar node system.","source":"@site/docs/core/system-diagrams.md","sourceDirName":"core","slug":"/core/system-diagrams","permalink":"/rust-docs/docs/core/system-diagrams","draft":false,"unlisted":false,"editUrl":"https://github.com/runar-labs/runar-rust/tree/main/rust-docs/markdown/docs/core/system-diagrams.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"P2P Transport Layer Specification","permalink":"/rust-docs/docs/core/p2p"}}');var s=i(4848),t=i(8453);const a={},c="Runar Node System Diagrams",o={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Sequence Diagrams",id:"sequence-diagrams",level:2},{value:"Local Service Request",id:"local-service-request",level:3},{value:"Remote Service Request",id:"remote-service-request",level:3},{value:"P2P Discovery and Connection",id:"p2p-discovery-and-connection",level:3},{value:"Event Publication",id:"event-publication",level:3},{value:"Service Subscription Setup",id:"service-subscription-setup",level:3},{value:"DHT Operations",id:"dht-operations",level:3},{value:"Service Lifecycle",id:"service-lifecycle",level:3},{value:"Network Authentication",id:"network-authentication",level:3},{value:"Flow Diagrams",id:"flow-diagrams",level:2},{value:"Request Processing",id:"request-processing",level:3},{value:"Service Initialization",id:"service-initialization",level:3},{value:"P2P Message Routing",id:"p2p-message-routing",level:3},{value:"Cache Operations",id:"cache-operations",level:3},{value:"Event Distribution",id:"event-distribution",level:3},{value:"Discovery Process",id:"discovery-process",level:3},{value:"Security Flow",id:"security-flow",level:3},{value:"Service Communication",id:"service-communication",level:3},{value:"Examples",id:"examples",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"runar-node-system-diagrams",children:"Runar Node System Diagrams"})}),"\n",(0,s.jsx)(n.p,{children:"This document provides a comprehensive collection of system diagrams illustrating the various flows and interactions within the Runar node system."}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#sequence-diagrams",children:"Sequence Diagrams"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#local-service-request",children:"Local Service Request"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#remote-service-request",children:"Remote Service Request"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#p2p-discovery-and-connection",children:"P2P Discovery and Connection"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#event-publication",children:"Event Publication"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#service-subscription-setup",children:"Service Subscription Setup"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#dht-operations",children:"DHT Operations"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#service-lifecycle",children:"Service Lifecycle"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#network-authentication",children:"Network Authentication"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#flow-diagrams",children:"Flow Diagrams"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#request-processing",children:"Request Processing"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#service-initialization",children:"Service Initialization"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#p2p-message-routing",children:"P2P Message Routing"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#cache-operations",children:"Cache Operations"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#event-distribution",children:"Event Distribution"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#discovery-process",children:"Discovery Process"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#security-flow",children:"Security Flow"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#service-communication",children:"Service Communication"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"sequence-diagrams",children:"Sequence Diagrams"}),"\n",(0,s.jsx)(n.h3,{id:"local-service-request",children:"Local Service Request"}),"\n",(0,s.jsx)(n.p,{children:"Shows the flow of a request to a local service."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant C as Client\n    participant SR as ServiceRegistry\n    participant S as Service\n\n    C->>SR: Service Request\n    SR--\x3e>C: Return Service Reference\n    C->>S: Direct Request\n    Note over S: Process Request\n    S--\x3e>C: Return Response\n"})}),"\n",(0,s.jsx)(n.h3,{id:"remote-service-request",children:"Remote Service Request"}),"\n",(0,s.jsx)(n.p,{children:"Illustrates how requests are handled when the target service is on a remote peer."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant C as Client\n    participant SR as ServiceRegistry\n    participant P2P as P2PTransport\n    participant RP as RemotePeer\n    participant RS as RemoteService\n\n    C->>SR: Service Request\n    SR->>P2P: Find Remote Service\n    P2P->>RP: Service Discovery Request\n    RP--\x3e>P2P: Service Info Response\n    P2P->>RS: Forward Request\n    Note over RS: Process Request\n    RS--\x3e>P2P: Return Response\n    P2P--\x3e>C: Forward Response\n"})}),"\n",(0,s.jsx)(n.h3,{id:"p2p-discovery-and-connection",children:"P2P Discovery and Connection"}),"\n",(0,s.jsx)(n.p,{children:"Shows how peers discover and establish connections with each other."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant P1 as Peer1\n    participant M as Multicast\n    participant P2 as Peer2\n    participant DHT as DHTNetwork\n\n    P1->>M: Send Discovery Message\n    Note right of M: Contains PeerId, NetworkId, Token\n    P2->>M: Receive Discovery Message\n    Note over P2: Validate Token\n    P2->>P1: QUIC Connection Request\n    Note over P1: Validate Token\n    P1--\x3e>P2: Connection Accept\n    P1->>P2: Exchange Service Directory\n    P2->>P1: Exchange Service Directory\n    P1->>DHT: Announce Services\n    P2->>DHT: Announce Services\n"})}),"\n",(0,s.jsx)(n.h3,{id:"event-publication",children:"Event Publication"}),"\n",(0,s.jsx)(n.p,{children:"Demonstrates how events are published and distributed across the network."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant S as Service\n    participant SR as ServiceRegistry\n    participant LS as LocalSubscribers\n    participant P2P as P2PTransport\n    participant RP1 as RemotePeer1\n    participant RP2 as RemotePeer2\n    participant LS1 as LocalServices1\n    participant LS2 as LocalServices2\n\n    S->>SR: Publish Event\n    SR->>LS: Notify Local Subscribers\n    SR->>P2P: Forward to Network\n    P2P->>RP1: Forward Event\n    P2P->>RP2: Forward Event\n    RP1->>LS1: Notify Local Subscribers\n    RP2->>LS2: Notify Local Subscribers\n"})}),"\n",(0,s.jsx)(n.h3,{id:"service-subscription-setup",children:"Service Subscription Setup"}),"\n",(0,s.jsx)(n.p,{children:"Shows how services set up their subscriptions during initialization."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant S as Service\n    participant SR as ServiceRegistry\n    participant P2P as P2PTransport\n    participant RP as RemotePeers\n\n    Note over S: Service Initialization\n    S->>SR: Register Service\n    S->>SR: Subscribe to Topics\n    SR->>P2P: Propagate Subscriptions\n    P2P->>RP: Broadcast Subscription Info\n    Note over RP: Store Remote Subscriptions\n    RP--\x3e>P2P: Acknowledge\n    P2P--\x3e>SR: Update Remote Subscription Table\n    Note over SR: Ready for Event Distribution\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dht-operations",children:"DHT Operations"}),"\n",(0,s.jsx)(n.p,{children:"Illustrates how DHT operations are processed."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant S as Service\n    participant P2P as P2PTransport\n    participant DHT as DHTNetwork\n    participant RP as RemotePeers\n\n    S->>P2P: DHT Put Request\n    P2P->>DHT: Find Closest Peers\n    DHT--\x3e>P2P: Return Peer List\n    P2P->>RP: Store Value Request\n    Note over RP: Validate & Store\n    RP--\x3e>P2P: Acknowledge Storage\n    P2P--\x3e>S: Operation Complete\n\n    S->>P2P: DHT Get Request\n    P2P->>DHT: Find Value\n    DHT->>RP: Query Value\n    RP--\x3e>DHT: Return Value\n    DHT--\x3e>P2P: Return Result\n    P2P--\x3e>S: Return Value\n"})}),"\n",(0,s.jsx)(n.h3,{id:"service-lifecycle",children:"Service Lifecycle"}),"\n",(0,s.jsx)(n.p,{children:"Shows the different states a service can be in."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"stateDiagram-v2\n    [*] --\x3e Created\n    Created --\x3e Initialized: init()\n    Initialized --\x3e Running: start()\n    Running --\x3e Paused: pause()\n    Paused --\x3e Running: resume()\n    Running --\x3e Stopped: stop()\n    Paused --\x3e Stopped: stop()\n    Stopped --\x3e [*]\n\n    note right of Created: Service object constructed\n    note right of Initialized: Subscriptions setup\n    note right of Running: Processing requests\n    note right of Paused: Temporary suspension\n    note right of Stopped: Cleanup complete\n"})}),"\n",(0,s.jsx)(n.h3,{id:"network-authentication",children:"Network Authentication"}),"\n",(0,s.jsx)(n.p,{children:"Shows the authentication process between peers."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant P1 as Peer1\n    participant P2 as Peer2\n    participant DHT as DHTNetwork\n\n    P1->>P2: Connection Request\n    Note over P1,P2: Include AccessToken\n    P2->>DHT: Verify NetworkId\n    DHT--\x3e>P2: Network Info\n    Note over P2: Validate Token\n    alt Token Valid\n        P2--\x3e>P1: Connection Accepted\n        P1->>P2: Begin Service Discovery\n    else Token Invalid\n        P2--\x3e>P1: Connection Rejected\n    end\n"})}),"\n",(0,s.jsx)(n.h2,{id:"flow-diagrams",children:"Flow Diagrams"}),"\n",(0,s.jsx)(n.h3,{id:"request-processing",children:"Request Processing"}),"\n",(0,s.jsx)(n.p,{children:"Shows how requests are processed through the system."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n    A[Client Request] --\x3e B{Local Service?}\n    B --\x3e|Yes| C[Get Service Reference]\n    B --\x3e|No| D[P2P Lookup]\n    \n    C --\x3e E[Validate Request]\n    D --\x3e E\n    \n    E --\x3e F{Valid?}\n    F --\x3e|No| G[Return Error]\n    F --\x3e|Yes| H[Process Request]\n    \n    H --\x3e I{Cacheable?}\n    I --\x3e|Yes| J[Store in Cache]\n    I --\x3e|No| K[Return Response]\n    J --\x3e K\n    \n    K --\x3e L[Record Metrics]\n    L --\x3e M[Send Response]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"service-initialization",children:"Service Initialization"}),"\n",(0,s.jsx)(n.p,{children:"Illustrates the initialization process of a service."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n    A[Service Creation] --\x3e B[Load Configuration]\n    B --\x3e C[Initialize State]\n    \n    C --\x3e D[Setup Metrics]\n    D --\x3e E[Setup Cache]\n    \n    E --\x3e F{P2P Enabled?}\n    F --\x3e|Yes| G[Setup P2P]\n    F --\x3e|No| H[Local Only Setup]\n    \n    G --\x3e I[Register Subscriptions]\n    H --\x3e I\n    \n    I --\x3e J[Register Actions]\n    J --\x3e K{All Setup Complete?}\n    \n    K --\x3e|Yes| L[Mark as Initialized]\n    K --\x3e|No| M[Cleanup]\n    M --\x3e N[Return Error]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"p2p-message-routing",children:"P2P Message Routing"}),"\n",(0,s.jsx)(n.p,{children:"Shows how messages are routed in the P2P network."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n    A[Incoming Message] --\x3e B{Message Type?}\n    \n    B --\x3e|Request| C[Validate Token]\n    B --\x3e|Event| D[Check Subscriptions]\n    B --\x3e|DHT| E[Process DHT Op]\n    \n    C --\x3e F{Token Valid?}\n    F --\x3e|Yes| G[Route to Service]\n    F --\x3e|No| H[Reject Message]\n    \n    D --\x3e I{Has Subscribers?}\n    I --\x3e|Yes| J[Notify Subscribers]\n    I --\x3e|No| K[Check Forward Rules]\n    \n    E --\x3e L{Operation Type?}\n    L --\x3e|Get| M[Find Value]\n    L --\x3e|Put| N[Store Value]\n    L --\x3e|Find Node| O[Return Closest]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cache-operations",children:"Cache Operations"}),"\n",(0,s.jsx)(n.p,{children:"Illustrates the flow of cache operations."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n    A[Cache Operation] --\x3e B{Operation Type?}\n    \n    B --\x3e|Get| C[Check Local Cache]\n    B --\x3e|Set| D[Validate Data]\n    B --\x3e|Delete| E[Remove Entry]\n    \n    C --\x3e F{Cache Hit?}\n    F --\x3e|Yes| G[Return Cached]\n    F --\x3e|No| H{Using DHT?}\n    \n    H --\x3e|Yes| I[Query DHT]\n    H --\x3e|No| J[Return Miss]\n    \n    D --\x3e K{Backend Type?}\n    K --\x3e|Memory| L[Store Local]\n    K --\x3e|Redis| M[Store Redis]\n    K --\x3e|DHT| N[Store DHT]\n    \n    N --\x3e O[Setup Replication]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"event-distribution",children:"Event Distribution"}),"\n",(0,s.jsx)(n.p,{children:"Shows how events are distributed through the system."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n    A[Event Published] --\x3e B[Check Topic]\n    \n    B --\x3e C{Scope?}\n    C --\x3e|Local| D[Local Distribution]\n    C --\x3e|Network| E[Network Distribution]\n    C --\x3e|Global| F[Global Distribution]\n    \n    D --\x3e G[Find Local Subscribers]\n    E --\x3e H[Find Network Subscribers]\n    F --\x3e I[Find All Subscribers]\n    \n    G --\x3e J[Local Delivery]\n    H --\x3e K[P2P Delivery]\n    I --\x3e L[Full Distribution]\n    \n    J --\x3e M[Record Metrics]\n    K --\x3e M\n    L --\x3e M\n"})}),"\n",(0,s.jsx)(n.h3,{id:"discovery-process",children:"Discovery Process"}),"\n",(0,s.jsx)(n.p,{children:"Illustrates the peer discovery process."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n    A[Start Discovery] --\x3e B[Load Networks]\n    \n    B --\x3e C{Discovery Method?}\n    C --\x3e|Multicast| D[Send Announcement]\n    C --\x3e|DHT| E[Query DHT]\n    C --\x3e|Bootstrap| F[Contact Seeds]\n    \n    D --\x3e G[Process Responses]\n    E --\x3e G\n    F --\x3e G\n    \n    G --\x3e H{Valid Peer?}\n    H --\x3e|Yes| I[Store Peer Info]\n    H --\x3e|No| J[Discard]\n    \n    I --\x3e K[Update Routing]\n    K --\x3e L[Start Connection]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"security-flow",children:"Security Flow"}),"\n",(0,s.jsx)(n.p,{children:"Shows the security validation process."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n    A[Security Check] --\x3e B{Check Type?}\n    \n    B --\x3e|Token| C[Validate Token]\n    B --\x3e|Network| D[Verify Network]\n    B --\x3e|Permission| E[Check Access]\n    \n    C --\x3e F{Token Valid?}\n    F --\x3e|Yes| G[Check Expiry]\n    F --\x3e|No| H[Reject]\n    \n    D --\x3e I{Network Member?}\n    I --\x3e|Yes| J[Verify Rights]\n    I --\x3e|No| H\n    \n    E --\x3e K{Has Permission?}\n    K --\x3e|Yes| L[Allow]\n    K --\x3e|No| H\n"})}),"\n",(0,s.jsx)(n.h3,{id:"service-communication",children:"Service Communication"}),"\n",(0,s.jsx)(n.p,{children:"Illustrates different types of service communication."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n    A[Communication Request] --\x3e B{Type?}\n    \n    B --\x3e|Direct| C[Service-to-Service]\n    B --\x3e|Event| D[Pub/Sub]\n    B --\x3e|Broadcast| E[Network-Wide]\n    \n    C --\x3e F[Get Target Service]\n    D --\x3e G[Topic Resolution]\n    E --\x3e H[Network Distribution]\n    \n    F --\x3e I{Service Location?}\n    I --\x3e|Local| J[Local Call]\n    I --\x3e|Remote| K[P2P Call]\n    \n    G --\x3e L[Find Subscribers]\n    H --\x3e M[Find Network Peers]\n    \n    J --\x3e N[Process & Return]\n    K --\x3e O[Remote Process]\n    L --\x3e P[Deliver Event]\n    M --\x3e Q[Broadcast Message]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.p,{children:"This section will be expanded with practical examples."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);