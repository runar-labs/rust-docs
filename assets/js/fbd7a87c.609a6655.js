"use strict";(self.webpackChunkrunar_docs=self.webpackChunkrunar_docs||[]).push([[123],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},8594:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"getting-started/quickstart","title":"Runar Quick Start Guide","description":"This guide will help you get started with Runar by building a simple application that demonstrates the core features including service definition, encryption, and cross-device data sharing.","source":"@site/docs/getting-started/quickstart.md","sourceDirName":"getting-started","slug":"/getting-started/quickstart","permalink":"/rust-docs/docs/getting-started/quickstart","draft":false,"unlisted":false,"editUrl":"https://github.com/runar-labs/runar-rust/tree/main/rust-docs/markdown/docs/getting-started/quickstart.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","next":{"title":"Runar Overview","permalink":"/rust-docs/docs/getting-started/overview"}}');var r=t(4848),s=t(8453);const a={},l="Runar Quick Start Guide",c={},o=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Creating a New Project",id:"creating-a-new-project",level:2},{value:"Creating a Simple Service",id:"creating-a-simple-service",level:2},{value:"What This Example Demonstrates",id:"what-this-example-demonstrates",level:2},{value:"1. Service Definition with Macros",id:"1-service-definition-with-macros",level:3},{value:"2. Event-Driven Architecture",id:"2-event-driven-architecture",level:3},{value:"3. Request/Response Pattern",id:"3-requestresponse-pattern",level:3},{value:"4. Service Lifecycle",id:"4-service-lifecycle",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"1. Add Encryption",id:"1-add-encryption",level:3},{value:"2. Explore Advanced Features",id:"2-explore-advanced-features",level:3},{value:"3. Build Real Applications",id:"3-build-real-applications",level:3},{value:"4. Learn the Architecture",id:"4-learn-the-architecture",level:3},{value:"Extending the Service",id:"extending-the-service",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Getting Help",id:"getting-help",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"runar-quick-start-guide",children:"Runar Quick Start Guide"})}),"\n",(0,r.jsx)(n.p,{children:"This guide will help you get started with Runar by building a simple application that demonstrates the core features including service definition, encryption, and cross-device data sharing."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Rust 1.70 or later"}),"\n",(0,r.jsx)(n.li,{children:"Basic understanding of Rust async/await"}),"\n",(0,r.jsx)(n.li,{children:"Git (for cloning the repository)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-new-project",children:"Creating a New Project"}),"\n",(0,r.jsx)(n.p,{children:"Start by creating a new Rust project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cargo new runar-hello-world\ncd runar-hello-world\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Add Runar as a dependency in your ",(0,r.jsx)(n.code,{children:"Cargo.toml"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[package]\nname = "runar-hello-world"\nversion = "0.1.0"\nedition = "2021"\n\n[dependencies]\nrunar_node = { path = "../runar-node" }\nrunar_macros = { path = "../runar-macros" }\nrunar_common = { path = "../runar-common" }\nrunar_keys = { path = "../runar-keys" }\nrunar_serializer = { path = "../runar-serializer" }\ntokio = { version = "1", features = ["full"] }\nanyhow = "1.0"\nserde = { version = "1.0", features = ["derive"] }\nserde_json = "1.0"\nlog = "0.4"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-simple-service",children:"Creating a Simple Service"}),"\n",(0,r.jsxs)(n.p,{children:["Let's create a simple math service with encryption capabilities. Replace the contents of ",(0,r.jsx)(n.code,{children:"src/main.rs"})," with the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use anyhow::Result;\nuse runar_common::{hmap, types::ArcValue};\nuse runar_macros::{action, publish, service, service_impl, subscribe};\nuse runar_node::{\n    services::{EventContext, RequestContext},\n    Node, NodeConfig,\n};\nuse std::sync::{Arc, Mutex};\n\n// Define a simple math service\n#[derive(Clone, Default)]\n#[service(\n    name = "Math Service",\n    path = "math",\n    description = "Simple arithmetic API with event publishing",\n    version = "1.0.0"\n)]\npub struct MathService;\n\n#[service_impl]\nimpl MathService {\n    /// Add two numbers and publish the total to `math/added`.\n    #[publish(topic = "added")]\n    #[action]\n    async fn add(&self, a: f64, b: f64, ctx: &RequestContext) -> Result<f64> {\n        ctx.debug(format!("Adding {a} + {b}"));\n        let result = a + b;\n        \n        // Publish the result as an event\n        ctx.publish("math/added", ArcValue::new_primitive(result)).await?;\n        \n        Ok(result)\n    }\n    \n    /// Subtract two numbers\n    #[action]\n    async fn subtract(&self, a: f64, b: f64, ctx: &RequestContext) -> Result<f64> {\n        ctx.debug(format!("Subtracting {a} - {b}"));\n        Ok(a - b)\n    }\n    \n    /// Multiply two numbers\n    #[action]\n    async fn multiply(&self, a: f64, b: f64, ctx: &RequestContext) -> Result<f64> {\n        ctx.debug(format!("Multiplying {a} * {b}"));\n        Ok(a * b)\n    }\n    \n    /// Divide two numbers with error handling\n    #[action]\n    async fn divide(&self, a: f64, b: f64, ctx: &RequestContext) -> Result<f64> {\n        ctx.debug(format!("Dividing {a} / {b}"));\n        if b == 0.0 {\n            return Err(anyhow::anyhow!("Cannot divide by zero"));\n        }\n        Ok(a / b)\n    }\n}\n\n// Define a statistics service that listens to math events\n#[derive(Clone)]\n#[service(\n    name = "Stats Service",\n    path = "stats",\n    description = "Statistics tracking service",\n    version = "1.0.0"\n)]\npub struct StatsService {\n    values: Arc<Mutex<Vec<f64>>>,\n}\n\nimpl Default for StatsService {\n    fn default() -> Self {\n        Self {\n            values: Arc::new(Mutex::new(Vec::new())),\n        }\n    }\n}\n\n#[service_impl]\nimpl StatsService {\n    /// Record a value manually\n    #[action]\n    async fn record(&self, value: f64, ctx: &RequestContext) -> Result<()> {\n        ctx.debug(format!("Recording value: {value}"));\n        self.values.lock().unwrap().push(value);\n        Ok(())\n    }\n\n    /// Return number of recorded values\n    #[action]\n    async fn count(&self, ctx: &RequestContext) -> Result<usize> {\n        let count = self.values.lock().unwrap().len();\n        ctx.debug(format!("Current count: {count}"));\n        Ok(count)\n    }\n    \n    /// Get the sum of all recorded values\n    #[action]\n    async fn sum(&self, ctx: &RequestContext) -> Result<f64> {\n        let sum: f64 = self.values.lock().unwrap().iter().sum();\n        ctx.debug(format!("Current sum: {sum}"));\n        Ok(sum)\n    }\n    \n    /// Get the average of all recorded values\n    #[action]\n    async fn average(&self, ctx: &RequestContext) -> Result<f64> {\n        let values = self.values.lock().unwrap();\n        if values.is_empty() {\n            return Err(anyhow::anyhow!("No values recorded"));\n        }\n        let avg = values.iter().sum::<f64>() / values.len() as f64;\n        ctx.debug(format!("Current average: {avg}"));\n        Ok(avg)\n    }\n\n    /// React to math/added events automatically\n    #[subscribe(topic = "math/added")]\n    async fn on_math_added(&self, total: f64, ctx: &EventContext) -> Result<()> {\n        ctx.debug(format!("Received math/added event: {total}"));\n        \n        // Record the result automatically\n        let _: () = ctx\n            .request("stats/record", Some(ArcValue::new_primitive(total)))\n            .await\n            .expect("Call to stats/record failed");\n        \n        Ok(())\n    }\n}\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // Initialize logging\n    runar_common::logging::init_logging("runar-hello-world", "info")?;\n    \n    println!("\ud83d\ude80 Starting Runar Hello World Application");\n    \n    // Create a minimal Node configuration\n    let config = NodeConfig::new_test_config("test-node", "hello-world-network");\n    let mut node = Node::new(config).await?;\n\n    // Register services\n    node.add_service(MathService).await?;\n    node.add_service(StatsService::default()).await?;\n\n    println!("\u2705 Services registered successfully");\n\n    // Test basic math operations\n    println!("\\n\ud83e\uddee Testing Math Operations:");\n    \n    // Addition\n    let add_params = ArcValue::new_map(hmap! { "a" => 10.0, "b" => 5.0 });\n    let sum: f64 = node.request("math/add", Some(add_params)).await?;\n    println!("   10 + 5 = {}", sum);\n\n    // Subtraction\n    let sub_params = ArcValue::new_map(hmap! { "a" => 10.0, "b" => 3.0 });\n    let difference: f64 = node.request("math/subtract", Some(sub_params)).await?;\n    println!("   10 - 3 = {}", difference);\n\n    // Multiplication\n    let mul_params = ArcValue::new_map(hmap! { "a" => 4.0, "b" => 7.0 });\n    let product: f64 = node.request("math/multiply", Some(mul_params)).await?;\n    println!("   4 * 7 = {}", product);\n\n    // Division\n    let div_params = ArcValue::new_map(hmap! { "a" => 15.0, "b" => 3.0 });\n    let quotient: f64 = node.request("math/divide", Some(div_params)).await?;\n    println!("   15 / 3 = {}", quotient);\n\n    // Test error handling\n    let div_by_zero_params = ArcValue::new_map(hmap! { "a" => 10.0, "b" => 0.0 });\n    match node.request::<f64>("math/divide", Some(div_by_zero_params)).await {\n        Ok(_) => println!("   \u274c Division by zero should have failed"),\n        Err(e) => println!("   \u2705 Division by zero correctly failed: {}", e),\n    }\n\n    // Check statistics\n    println!("\\n\ud83d\udcca Checking Statistics:");\n    \n    // Count should be 1 (from the add operation that published an event)\n    let count: usize = node.request("stats/count", None::<ArcValue>).await?;\n    println!("   Total values recorded: {}", count);\n\n    // Sum should be 15 (from the add operation)\n    let total_sum: f64 = node.request("stats/sum", None::<ArcValue>).await?;\n    println!("   Sum of all values: {}", total_sum);\n\n    // Average should be 15 (only one value)\n    let avg: f64 = node.request("stats/average", None::<ArcValue>).await?;\n    println!("   Average of all values: {}", avg);\n\n    // Record a few more values manually\n    println!("\\n\ud83d\udcdd Recording Additional Values:");\n    \n    for value in [20.0, 30.0, 40.0] {\n        let record_params = ArcValue::new_map(hmap! { "value" => value });\n        let _: () = node.request("stats/record", Some(record_params)).await?;\n        println!("   Recorded: {}", value);\n    }\n\n    // Check updated statistics\n    println!("\\n\ud83d\udcca Updated Statistics:");\n    \n    let final_count: usize = node.request("stats/count", None::<ArcValue>).await?;\n    println!("   Total values recorded: {}", final_count);\n\n    let final_sum: f64 = node.request("stats/sum", None::<ArcValue>).await?;\n    println!("   Sum of all values: {}", final_sum);\n\n    let final_avg: f64 = node.request("stats/average", None::<ArcValue>).await?;\n    println!("   Average of all values: {}", final_avg);\n\n    println!("\\n\ud83c\udf89 All tests completed successfully!");\n    println!("\u2705 Math operations working");\n    println!("\u2705 Event publishing working");\n    println!("\u2705 Event subscription working");\n    println!("\u2705 Statistics tracking working");\n    println!("\u2705 Error handling working");\n\n    Ok(())\n}\n\n## Testing the Service\n\nYou can now build and run your service:\n\n```bash\ncargo run\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The service will start and execute the test requests defined in the ",(0,r.jsx)(n.code,{children:"main"})," function. You should see output similar to:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\ud83d\ude80 Starting Runar Hello World Application\n\u2705 Services registered successfully\n\n\ud83e\uddee Testing Math Operations:\n   10 + 5 = 15\n   10 - 3 = 7\n   4 * 7 = 28\n   15 / 3 = 5\n   \u2705 Division by zero correctly failed: Cannot divide by zero\n\n\ud83d\udcca Checking Statistics:\n   Total values recorded: 1\n   Sum of all values: 15\n   Average of all values: 15\n\n\ud83d\udcdd Recording Additional Values:\n   Recorded: 20\n   Recorded: 30\n   Recorded: 40\n\n\ud83d\udcca Updated Statistics:\n   Total values recorded: 4\n   Sum of all values: 105\n   Average of all values: 26.25\n\n\ud83c\udf89 All tests completed successfully!\n\u2705 Math operations working\n\u2705 Event publishing working\n\u2705 Event subscription working\n\u2705 Statistics tracking working\n\u2705 Error handling working\n"})}),"\n",(0,r.jsx)(n.h2,{id:"what-this-example-demonstrates",children:"What This Example Demonstrates"}),"\n",(0,r.jsx)(n.h3,{id:"1-service-definition-with-macros",children:"1. Service Definition with Macros"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"#[service]"})}),": Defines a service with metadata"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"#[action]"})}),": Marks methods as callable actions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"#[publish]"})}),": Automatically publishes events"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"#[subscribe]"})}),": Listens to events from other services"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-event-driven-architecture",children:"2. Event-Driven Architecture"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"MathService"})," publishes events when operations complete"]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"StatsService"})," automatically subscribes to these events"]}),"\n",(0,r.jsx)(n.li,{children:"Services communicate loosely through events"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-requestresponse-pattern",children:"3. Request/Response Pattern"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Services expose actions that can be called directly"}),"\n",(0,r.jsxs)(n.li,{children:["Type-safe parameter passing with ",(0,r.jsx)(n.code,{children:"ArcValue"})]}),"\n",(0,r.jsx)(n.li,{children:"Proper error handling and logging"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-service-lifecycle",children:"4. Service Lifecycle"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Services are registered with the node"}),"\n",(0,r.jsx)(n.li,{children:"Automatic initialization and startup"}),"\n",(0,r.jsx)(n.li,{children:"Proper cleanup on shutdown"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"You've created a simple Runar service! Here are some next steps to explore:"}),"\n",(0,r.jsx)(n.h3,{id:"1-add-encryption",children:"1. Add Encryption"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Learn about ",(0,r.jsx)(n.a,{href:"../features/keys-management",children:"Key Management"})]}),"\n",(0,r.jsxs)(n.li,{children:["Implement ",(0,r.jsx)(n.a,{href:"../features/enhanced-serialization",children:"Selective Field Encryption"})]}),"\n",(0,r.jsxs)(n.li,{children:["Add ",(0,r.jsx)(n.a,{href:"../features/encryption-schema",children:"Envelope Encryption"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-explore-advanced-features",children:"2. Explore Advanced Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Set up ",(0,r.jsx)(n.a,{href:"../core/p2p",children:"P2P Communication"})]}),"\n",(0,r.jsxs)(n.li,{children:["Implement ",(0,r.jsx)(n.a,{href:"../core/discovery",children:"Service Discovery"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-build-real-applications",children:"3. Build Real Applications"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create a"}),"\n",(0,r.jsx)(n.li,{children:"Build a"}),"\n",(0,r.jsx)(n.li,{children:"Implement a"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-learn-the-architecture",children:"4. Learn the Architecture"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Understand ",(0,r.jsx)(n.a,{href:"../core/architecture",children:"Runar's Architecture"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"extending-the-service",children:"Extending the Service"}),"\n",(0,r.jsx)(n.p,{children:"To extend this service, you can:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add More Operations"}),": Implement additional mathematical operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add State Management"}),": Store operation history in a database"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add Authentication"}),": Implement user authentication and authorization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add Encryption"}),": Encrypt sensitive data using Runar's encryption system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add Network Support"}),": Enable P2P communication between nodes"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Compilation Errors"}),": Ensure all dependencies are properly specified in ",(0,r.jsx)(n.code,{children:"Cargo.toml"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Runtime Errors"}),": Check that services are properly registered before use"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event Issues"}),": Verify that subscription paths match publication paths"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type Errors"}),": Ensure parameter types match between service definitions and calls"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"getting-help",children:"Getting Help"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Check the ",(0,r.jsx)(n.a,{href:"../core/architecture",children:"Architecture Documentation"})]}),"\n",(0,r.jsxs)(n.li,{children:["Review the ",(0,r.jsx)(n.a,{href:"../services/macros",children:"Service Macros"})]}),"\n",(0,r.jsx)(n.li,{children:"Look at the"}),"\n",(0,r.jsx)(n.li,{children:"Join the community discussions"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Happy coding with Runar!"})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);