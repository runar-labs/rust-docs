"use strict";(self.webpackChunkrunar_docs=self.webpackChunkrunar_docs||[]).push([[8],{7895:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>g});const s=JSON.parse('{"id":"features/logging","title":"Logging Framework Usage Guidelines","description":"Table of Contents","source":"@site/docs/features/logging.md","sourceDirName":"features","slug":"/features/logging","permalink":"/rust-docs/docs/features/logging","draft":false,"unlisted":false,"editUrl":"https://github.com/runar-labs/runar-rust/tree/main/rust-docs/markdown/docs/features/logging.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Runar Key Management System","permalink":"/rust-docs/docs/features/keys-management"},"next":{"title":"ValueMap (VMap)","permalink":"/rust-docs/docs/features/vmap"}}');var o=t(4848),i=t(8453);const l={},r="Logging Framework Usage Guidelines",a={},g=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Core Principles",id:"core-principles",level:2},{value:"Log Levels",id:"log-levels",level:2},{value:"Components",id:"components",level:2},{value:"Logging Functions",id:"logging-functions",level:2},{value:"Important: Awaiting Log Calls",id:"important-awaiting-log-calls",level:2},{value:"Usage in Tests",id:"usage-in-tests",level:2},{value:"Controlling Log Levels",id:"controlling-log-levels",level:2},{value:"Examples",id:"examples",level:2},{value:"Instead of println in tests:",id:"instead-of-println-in-tests",level:3},{value:"For debugging in tests:",id:"for-debugging-in-tests",level:3},{value:"For error conditions:",id:"for-error-conditions",level:3},{value:"Guidelines for Converting println to Logging",id:"guidelines-for-converting-println-to-logging",level:2},{value:"Implementation Notes",id:"implementation-notes",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"logging-framework-usage-guidelines",children:"Logging Framework Usage Guidelines"})}),"\n",(0,o.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(n.p,{children:["This document outlines the standard approach for logging within the Runar codebase, including both application code and test code. Instead of using ",(0,o.jsx)(n.code,{children:"println!()"})," statements, all logging should use the structured logging framework provided by the project, which allows for consistent formatting, level-based filtering, and component-specific logging."]}),"\n",(0,o.jsx)(n.h2,{id:"core-principles",children:"Core Principles"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Use the logging framework instead of ",(0,o.jsx)(n.code,{children:"println!()"})," for all diagnostic output"]}),"\n",(0,o.jsx)(n.li,{children:"Always specify the appropriate component when logging"}),"\n",(0,o.jsx)(n.li,{children:"Choose the appropriate log level for the message"}),"\n",(0,o.jsxs)(n.li,{children:["Remember to ",(0,o.jsx)(n.code,{children:".await"})," all logging calls, as they are async functions"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"log-levels",children:"Log Levels"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"TRACE"}),": Very detailed information, typically only useful when diagnosing specific issues"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"DEBUG"}),": Detailed information on the flow through the system"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"INFO"}),": Notable events but not issues (service start/stop, connections established)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"WARN"}),": Potentially harmful situations that might still allow the application to continue"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ERROR"}),": Error events that might still allow the application to continue running"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"Component"})," enum identifies different parts of the system:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"pub enum Component {\n    Node,\n    Service,\n    P2P,\n    Registry,\n    Test,\n    ServiceRegistry,\n    IPC,\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Always choose the most specific component applicable for your log message."}),"\n",(0,o.jsx)(n.h2,{id:"logging-functions",children:"Logging Functions"}),"\n",(0,o.jsx)(n.p,{children:"The following async functions are available for logging:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"pub async fn trace_log(component: Component, message: &str)\npub async fn debug_log(component: Component, message: &str)\npub async fn info_log(component: Component, message: &str)\npub async fn warn_log(component: Component, message: &str)\npub async fn error_log(component: Component, message: &str)\n"})}),"\n",(0,o.jsx)(n.p,{children:"There's also a special version for debug logging that includes formatted debug output of a value:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"pub fn debug_log_with_data<T: std::fmt::Debug>(component: Component, message: &str, data: &T)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"important-awaiting-log-calls",children:"Important: Awaiting Log Calls"}),"\n",(0,o.jsx)(n.p,{children:"Because the logging functions are async, they must be awaited or the log messages may not be processed."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'// Correct usage:\ninfo_log(Component::Test, "Starting test").await;\n\n// Incorrect (warning will be generated):\ninfo_log(Component::Test, "Starting test"); // Missing await!\n'})}),"\n",(0,o.jsxs)(n.p,{children:['The compiler will warn about "unused implementer of ',(0,o.jsx)(n.code,{children:"futures::Future"}),' that must be used" when the await is missing.']}),"\n",(0,o.jsx)(n.h2,{id:"usage-in-tests",children:"Usage in Tests"}),"\n",(0,o.jsxs)(n.p,{children:["For tests, use the ",(0,o.jsx)(n.code,{children:"Component::Test"})," component with appropriate log levels. Before running tests that use logging, call ",(0,o.jsx)(n.code,{children:"configure_test_logging()"})," to set up logging with the right levels for tests:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'#[tokio::test]\nasync fn test_something() -> Result<()> {\n    // Set up logging for tests\n    configure_test_logging();\n    \n    // Use logging instead of println\n    info_log(Component::Test, "Starting test").await;\n    \n    // Test logic...\n    \n    // Log test completion\n    info_log(Component::Test, "Test completed successfully").await;\n    Ok(())\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"controlling-log-levels",children:"Controlling Log Levels"}),"\n",(0,o.jsxs)(n.p,{children:["Log levels can be controlled using the ",(0,o.jsx)(n.code,{children:"RUST_LOG"})," environment variable. For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"RUST_LOG=debug cargo test\nRUST_LOG=info,runar_node::p2p=debug cargo run\n"})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.h3,{id:"instead-of-println-in-tests",children:"Instead of println in tests:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'// Bad:\nprintln!("Starting test service");\n\n// Good:\ninfo_log(Component::Test, "Starting test service").await;\n'})}),"\n",(0,o.jsx)(n.h3,{id:"for-debugging-in-tests",children:"For debugging in tests:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'// Bad:\nprintln!("Request details: {:?}", request);\n\n// Good:\ndebug_log_with_data(Component::Test, "Request details", &request);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"for-error-conditions",children:"For error conditions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'// Bad:\nprintln!("Failed to connect: {}", error);\n\n// Good:\nerror_log(Component::Test, &format!("Failed to connect: {}", error)).await;\n'})}),"\n",(0,o.jsx)(n.h2,{id:"guidelines-for-converting-println-to-logging",children:"Guidelines for Converting println to Logging"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Identify the appropriate component for the log message"}),"\n",(0,o.jsx)(n.li,{children:"Choose the appropriate log level (info, debug, error, etc.)"}),"\n",(0,o.jsx)(n.li,{children:"Format string messages inside the log call"}),"\n",(0,o.jsx)(n.li,{children:"Remember to await the logging call"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,o.jsxs)(n.p,{children:["The logging implementation in ",(0,o.jsx)(n.code,{children:"util::logging.rs"})," is built on top of the standard Rust ",(0,o.jsx)(n.code,{children:"log"})," crate and integrates with the node ID system to provide context for logs. This allows logs to be filtered and aggregated effectively in multi-node environments."]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var s=t(6540);const o={},i=s.createContext(o);function l(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);