"use strict";(self.webpackChunkrunar_docs=self.webpackChunkrunar_docs||[]).push([[5204],{2301:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"core/logging","title":"Logging System","description":"Overview","source":"@site/docs/core/logging.md","sourceDirName":"core","slug":"/core/logging","permalink":"/rust-docs/docs/core/logging","draft":false,"unlisted":false,"editUrl":"https://github.com/runar-labs/runar-rust/tree/main/rust-docs/markdown/docs/core/logging.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Discovery Mechanism Specification","permalink":"/rust-docs/docs/core/discovery"},"next":{"title":"P2P Transport Layer Specification","permalink":"/rust-docs/docs/core/p2p"}}');var i=t(4848),o=t(8453);const l={},r="Logging System",a={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Simple Logging",id:"simple-logging",level:3},{value:"Context-Aware Logging",id:"context-aware-logging",level:3},{value:"Adding Custom Fields",id:"adding-custom-fields",level:3},{value:"Log Levels",id:"log-levels",level:2},{value:"Async vs. Sync Contexts",id:"async-vs-sync-contexts",level:2},{value:"In Async Functions",id:"in-async-functions",level:3},{value:"In Sync Functions",id:"in-sync-functions",level:3},{value:"ID Management",id:"id-management",level:2},{value:"Logging Flow",id:"logging-flow",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"LogContext Trait",id:"logcontext-trait",level:3},{value:"Macro Implementation",id:"macro-implementation",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Global Configuration",id:"global-configuration",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Integration with Other Systems",id:"integration-with-other-systems",level:2},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"logging-system",children:"Logging System"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The Runar Logging System provides a consistent, context-aware logging interface that works seamlessly in both asynchronous and synchronous code. Through clever use of macros, it eliminates the need to handle ",(0,i.jsx)(n.code,{children:".await"})," calls manually while ensuring that contextual information is uniformly included."]}),"\n",(0,i.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unified API for async/sync contexts"}),": Same syntax regardless of execution context"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Contextual metadata"}),": Automatic inclusion of request, node, and network IDs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Structured logging"}),": Field-based logging for better filtering and analysis"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ID truncation"}),": Improved readability while maintaining searchability"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Customizable fields"}),": Easy addition of custom metadata to log entries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Log level control"}),": Fine-grained control over which messages are logged"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.h3,{id:"simple-logging",children:"Simple Logging"}),"\n",(0,i.jsx)(n.p,{children:"The logging macros can be used with or without a context:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Basic logging with just a message\ninfo!("Server started on port 8080");\n\n// Logging with additional fields\ninfo!("Request processed", "duration_ms" => 42, "status" => "success");\n\n// Logging with a context object that provides additional metadata\ninfo!("Handling request", request_context);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"context-aware-logging",children:"Context-Aware Logging"}),"\n",(0,i.jsx)(n.p,{children:"When a context is provided, relevant metadata is automatically extracted:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// With a RequestContext, this automatically includes request_id, node_id, etc.\ninfo!("Processing request", context);\n\n// Example output:\n// [INFO] [req:a7f3b] [net:d8e2c] [node:c4f1e] Processing request\n'})}),"\n",(0,i.jsx)(n.h3,{id:"adding-custom-fields",children:"Adding Custom Fields"}),"\n",(0,i.jsx)(n.p,{children:"Additional fields can be added as key-value pairs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'info!("Request processed", context, \n    "duration_ms" => 42, \n    "status" => "success", \n    "method" => "GET"\n);\n\n// Example output:\n// [INFO] [req:a7f3b] [net:d8e2c] [node:c4f1e] [duration_ms:42] [status:success] [method:GET] Request processed\n'})}),"\n",(0,i.jsx)(n.h2,{id:"log-levels",children:"Log Levels"}),"\n",(0,i.jsx)(n.p,{children:"The system provides multiple log level macros:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Detailed information for debugging\ndebug!("Connection details", context, "bytes" => payload.len());\n\n// Normal operational messages\ninfo!("Service started successfully", context);\n\n// Warning conditions\nwarn!("Retrying failed operation", context, "attempt" => retry_count);\n\n// Error conditions\nerror!("Database connection failed", context, "reason" => e.to_string());\n'})}),"\n",(0,i.jsx)(n.h2,{id:"async-vs-sync-contexts",children:"Async vs. Sync Contexts"}),"\n",(0,i.jsx)(n.p,{children:"The same logging macros work in both async and sync contexts:"}),"\n",(0,i.jsx)(n.h3,{id:"in-async-functions",children:"In Async Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'async fn process_request(request: Request, context: &RequestContext) -> Result<Response> {\n    info!("Processing request", context);\n    \n    // Do async work...\n    \n    info!("Request completed", context, "duration_ms" => duration);\n    Ok(response)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"in-sync-functions",children:"In Sync Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'fn validate_input(input: &str, context: &RequestContext) -> bool {\n    debug!("Validating input", context, "length" => input.len());\n    \n    // Validate synchronously...\n    \n    let valid = input.len() > 0;\n    debug!("Validation result", context, "valid" => valid);\n    valid\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"id-management",children:"ID Management"}),"\n",(0,i.jsx)(n.p,{children:"IDs are automatically truncated for readability while maintaining full searchability:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// Log display shows truncated IDs (5 chars)\n// [INFO] [req:a7f3b] [net:d8e2c] [node:c4f1e] Processing request\n\n// But full IDs are included in the log entry for filtering\n// Full IDs: request_id_full:a7f3b291c4e5d6 network_id_full:d8e2c3a4b5c6d7 node_id_full:c4f1e2d3b4a5c6\n"})}),"\n",(0,i.jsx)(n.h2,{id:"logging-flow",children:"Logging Flow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-mermaid",children:'graph TD\n    A["Logging Macro Call"] --\x3e B{"Async Context?"}\n    B --\x3e|Yes| C["Async Logger"]\n    B --\x3e|No| D["Sync Logger"]\n    C --\x3e E["Extract Context Metadata"]\n    D --\x3e E\n    E --\x3e F["Add Custom Fields"]\n    F --\x3e G["Format Log Message"]\n    G --\x3e H["Apply ID Truncation"]\n    H --\x3e I["Write Log Entry"]\n    \n    subgraph "Logging Pipeline"\n        E\n        F\n        G\n        H\n    end\n    \n    style A fill:#bbf,stroke:#333,stroke-width:2px\n    style E fill:#9f9,stroke:#333,stroke-width:2px\n    style H fill:#9f9,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px\n'})}),"\n",(0,i.jsx)(n.p,{children:"The diagram above illustrates how the logging system works:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The logging macro is called with a message and optional context"}),"\n",(0,i.jsx)(n.li,{children:"The macro determines if it's in an async or sync context"}),"\n",(0,i.jsx)(n.li,{children:"In async contexts, the log operation is spawned as a task"}),"\n",(0,i.jsx)(n.li,{children:"In sync contexts, a synchronous logging method is used"}),"\n",(0,i.jsx)(n.li,{children:"Contextual metadata is automatically extracted and formatted"}),"\n",(0,i.jsx)(n.li,{children:"The formatted log entry is written to the configured output"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(n.h3,{id:"logcontext-trait",children:"LogContext Trait"}),"\n",(0,i.jsx)(n.p,{children:"The system uses a trait to extract metadata from contexts:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"pub trait LogContext {\n    fn request_id(&self) -> Option<&str> { None }\n    fn network_id(&self) -> Option<&str> { None }\n    fn peer_id(&self) -> Option<&str> { None }\n    fn node_id(&self) -> Option<&str> { None }\n}\n\nimpl LogContext for RequestContext {\n    // Implementations\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"macro-implementation",children:"Macro Implementation"}),"\n",(0,i.jsx)(n.p,{children:"The macros detect whether they're in an async context and handle accordingly:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'#[macro_export]\nmacro_rules! info {\n    ($message:expr, $context:expr) => {\n        {\n            let formatted_context = format_context($context);\n            \n            #[cfg(feature = "async")]\n            {\n                if let Some(runtime) = tokio::runtime::Handle::try_current().ok() {\n                    let _ = runtime.spawn(async {\n                        Logger::global().info($message, formatted_context).await\n                    });\n                } else {\n                    // Fall back to sync logging if not in an async context\n                    Logger::global().info_sync($message, formatted_context);\n                }\n            }\n            \n            #[cfg(not(feature = "async"))]\n            {\n                Logger::global().info_sync($message, formatted_context);\n            }\n        }\n    };\n    \n    // Other variants...\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use appropriate log levels"}),": Reserve ",(0,i.jsx)(n.code,{children:"debug!"})," for detailed information and ",(0,i.jsx)(n.code,{children:"info!"})," for significant events"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Always include context"}),": Pass relevant context objects to enable proper request tracing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add relevant fields"}),": Include operation-specific data as key-value fields"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Be consistent"}),": Use similar field names across related operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keep messages concise"}),": Place details in fields rather than in the message text"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use structured data"}),": Avoid embedding JSON or complex data in message strings"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Logging can be configured at several levels:"}),"\n",(0,i.jsx)(n.h3,{id:"global-configuration",children:"Global Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Set global log level\nLogger::global().set_level(LogLevel::Info);\n\n// Configure outputs\nLogger::global().add_output(FileOutput::new("/var/log/runar.log"));\nLogger::global().add_output(ConsoleOutput::new());\n\n// Set filter patterns\nLogger::global().add_filter("req:a7f3b*", LogLevel::Debug);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsx)(n.p,{children:"The logging system respects environment variables for dynamic configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'# Set default log level\nexport RUNAR_LOG_LEVEL=info\n\n# Enable debug logs for specific components\nexport RUNAR_LOG_FILTER="p2p=debug,node=debug"\n\n# Configure output format\nexport RUNAR_LOG_FORMAT="json"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-other-systems",children:"Integration with Other Systems"}),"\n",(0,i.jsx)(n.p,{children:"The logging system integrates with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Distributed tracing"}),": Compatible with OpenTelemetry and Jaeger"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Log aggregation"}),": Supports structured formats for Elasticsearch/Kibana"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitoring systems"}),": Can emit metrics along with logs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cloud environments"}),": Works with Kubernetes, Docker, and cloud logging services"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Context System - How context enables secure and traceable communication"}),"\n",(0,i.jsx)(n.li,{children:"Request Handling - Best practices for using logging in request handlers"}),"\n",(0,i.jsx)(n.li,{children:"Service Lifecycle - Understanding service logging during different lifecycle phases"}),"\n",(0,i.jsx)(n.li,{children:"ValueMap (VMap) - Core abstraction for working with structured data"}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);